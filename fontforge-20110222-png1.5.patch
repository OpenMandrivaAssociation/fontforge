--- fontforge-20110222/gutils/gimagewritepng.c.orig	2011-11-23 15:39:41.961941456 -0200
+++ fontforge-20110222/gutils/gimagewritepng.c	2011-11-23 16:00:59.039561969 -0200
@@ -296,7 +296,7 @@ static void user_error_fn(png_structp pn
 #if (PNG_LIBPNG_VER < 10500)
     longjmp(png_ptr->jmpbuf,1);
 #else
-    _png_longjmp (png_ptr, 1);
+    longjmp (png_jmpbuf(png_ptr), 1);
 #endif
 }
 
@@ -310,6 +310,14 @@ int GImageWrite_Png(GImage *gi, FILE *fp
     png_infop info_ptr;
     png_byte **rows;
     int i;
+#if (PNG_LIBPNG_VER >= 10500)
+    png_colorp palette;
+    int num_palette;
+    int bit_depth, color_type;
+    png_bytep trans_alpha;
+    png_color_16p trans_color;
+    int num_trans;
+#endif
 
    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING,
       (void *)NULL, user_error_fn, user_warning_fn);
@@ -336,6 +344,7 @@ return(false);
 
    png_init_io(png_ptr, fp);
 
+#if (PNG_LIBPNG_VER < 10500)
    info_ptr->width = base->width;
    info_ptr->height = base->height;
    info_ptr->bit_depth = 8;
@@ -392,9 +401,72 @@ return(false);
 #endif
        }
    }
+
+#else
+    bit_depth = 8;
+    num_trans = 0;
+    trans_alpha = NULL;
+    trans_color = NULL;
+    if (base->image_type == it_index || base->image_type == it_bitmap) {
+	color_type = PNG_COLOR_TYPE_PALETTE;
+	num_palette = base->clut == NULL ? 2 : base->clut->clut_len;
+	palette = (png_colorp)galloc(num_palette * sizeof(png_color));
+	if (base->clut == NULL) {
+	    palette[0].red = palette[0].green = palette[0].blue = 0;
+	    palette[1].red = palette[1].green = palette[1].blue = 0xff;
+	}
+	else {
+	    for (i = 0; i < num_palette; ++i) {
+		long col = base->clut->clut[i];
+		palette[i].red = COLOR_RED(col);
+		palette[i].green = COLOR_GREEN(col);
+		palette[i].blue = COLOR_BLUE(col);
+	    }
+	}
+	if (num_palette <= 2)
+	    bit_depth = 1;
+	else if (num_palette <= 4)
+	    bit_depth = 2;
+	else if (num_palette <= 16)
+	    bit_depth = 4;
+	if (base->trans !=- 1) {
+	    num_trans = 1;
+	    trans_alpha = galloc(1);
+	    trans_alpha[0] = base->trans;
+	}
+    }
+    else {
+	color_type = PNG_COLOR_TYPE_RGB;
+	palette = NULL;
+	if (base->trans !=- 1) {
+	    num_trans = 1;
+	    trans_color = (png_color_16p)galloc(sizeof(png_color_16));
+	    trans_color->index = 0;
+	    trans_color->red = COLOR_RED(base->trans);
+	    trans_color->green = COLOR_GREEN(base->trans);
+	    trans_color->blue = COLOR_BLUE(base->trans);
+	    trans_color->gray = 0;
+	}
+    }
+    png_set_IHDR(png_ptr, info_ptr, base->width, base->height, bit_depth,
+		 color_type, progressive, PNG_COMPRESSION_TYPE_BASE,
+		 PNG_FILTER_TYPE_BASE);
+    if (palette) {
+	png_set_PLTE(png_ptr, info_ptr, palette, num_palette);
+	if (num_palette <= 16)
+	    png_set_packing(png_ptr);
+    }
+    if (num_trans)
+	png_set_tRNS(png_ptr, info_ptr, trans_alpha, num_trans, trans_color);
+#endif
+
    png_write_info(png_ptr, info_ptr);
 
+#if (PNG_LIBPNG_VER < 10500)
     if (info_ptr->color_type == PNG_COLOR_TYPE_RGB)
+#else
+    if (color_type == PNG_COLOR_TYPE_RGB)
+#endif
 	png_set_filler(png_ptr, '\0', PNG_FILLER_BEFORE);
 
     rows = galloc(base->height*sizeof(png_byte *));
@@ -405,12 +477,21 @@ return(false);
 
     png_write_end(png_ptr, info_ptr);
 
-#if ( PNG_LIBPNG_VER_MAJOR > 1 || PNG_LIBPNG_VER_MINOR > 2 )
+#if (PNG_LIBPNG_VER < 10500)
+#  if ( PNG_LIBPNG_VER_MAJOR > 1 || PNG_LIBPNG_VER_MINOR > 2 )
     if ( info_ptr->trans_alpha!=NULL ) gfree(info_ptr->trans_alpha);
-#else
+#  else
     if ( info_ptr->trans!=NULL ) gfree(info_ptr->trans);
-#endif
+#  endif
     if ( info_ptr->palette!=NULL ) gfree(info_ptr->palette);
+#else
+    if (trans_alpha)
+	gfree(trans_alpha);
+    if (trans_color)
+	gfree(trans_color);
+    if (palette)
+	gfree(palette);
+#endif
     png_destroy_write_struct(&png_ptr, &info_ptr);
     gfree(rows);
 return( 1 );
